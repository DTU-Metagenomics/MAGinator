# Converts the 

genemat <- read.table(snakemake@input[["matrix"]], header = T, sep = "\t", row.names=1)
rows <- length(genemat[,1]) #    
cols <- length(genemat[1,])
gene_clusters <- read.table("/Users/trizac/Desktop/VAMB_R_data/geneID_clusterID_snake.tsv", header = F, sep=" ")
clustercounts <- as.data.frame(table(gene_clusters[,2])) #counting the genes of all bins
cluster_order <- unique(gene_clusters[,2])


## Examining which gene ID that are not present within the geneID_clusterID.tsv file.
#geneIDs_cluster <- gene_clusters[,1] #the gene IDs of geneID_clusterID.tsv
#geneIDs_genemat <- rownames(genemat)
# '%nin%' <- Negate('%in%')
# geneIDs_genemat[geneIDs_genemat %nin% geneIDs_cluster]
# 
# #deleting the row with only the asterisk 
# #genemat = genemat[rownames(genemat) != '*',]

#saving the amount of different contigs for each sample
n_contigs_per_sample <- array("NA", dim=cols)
for (col in 1:cols){
  n_contigs_per_sample[col] <- length(genemat[,col][genemat[,col]>0])
}
n_contigs_per_sample <- as.integer(n_contigs_per_sample)
mean(n_contigs_per_sample)


# n_samples_per_contig <- array("NA", dim=rows)
# for (row in 1:rows){
#   n_samples_per_contig[row] <- length(genemat[row,][genemat[row,]>0])
# }
# n_samples_per_contig <- as.integer(n_samples_per_contig, na.rm=TRUE)
# mean(n_samples_per_contig[row])




start <- 1
cluster_names <- array("NA", dim=length(clustercounts$Freq))
count <- 0

for (i in cluster_order){
  count <- count + 1
  size <- clustercounts$Freq[clustercounts$Var1 == i]
  m_name <- paste('Cluster', i, sep = "")
  cluster_names[count] <- m_name 
  end <- start + size - 1
  assign(m_name, as.matrix(genemat[start:end,]))
  # assign(m_name, genemat[start:end,])
  start <- end + 1
}
 
#combining the clusters into a large list
clusterlist <- mget(cluster_names)

saveRDS(clusterlist, file="/Users/trizac/Desktop/VAMB_R_data/Cluster.RDS")

# Saving the gene lengths as a named array of integers
gene_lengths <- read.table("all_genes_nonredundant.fasta.fai", header=F, sep="\t")
g <- split(gene_lengths[,2]*3, gene_lengths[,1]) #multiplying by 3 to go from prot to nucleotide
g <- unlist(g)

saveRDS(g, file="VAMB_genelengths.RDS")
