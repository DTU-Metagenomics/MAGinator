##############################################################################################

#This Snakefile takes the sequences of VAMB clusters and produces a gene count matrix of the nonredundant genes for each cluster (also excluding representative sequences)

#input files is found in
#/home/projects/cu_10108/people/trizac/HQ_clusters/contigs

# The output is:
#    VAMB_genes/nonredundant_gene_clusters/gene_count_matrix.tsv: Gene count matrix of the readcounts of all genes of the unique genes
#    VAMB_genes/nonredundant_gene_clusters/geneID_clusterID_snake.tsv: List of gene names and their associated cluster

##############################################################################################

#!python

#!/usr/bin/env python3
import os
import sys
import pandas
import re

#configfile: "config.yaml"

#Get IDs / wildcards for the clusters and the samples

clusterfile = config["cluster_analysis_file"]
IDS = pandas.read_csv(clusterfile, header=None).loc[:, 0].tolist()

SAMPLES, = glob_wildcards("/home/projects/cu_10108/people/trizac/reads/{sample}_1.fastq")
assemblies, = glob_wildcards("/home/projects/cu_10108/data/Generated/Assemblies/{sample}.fna")


#Helper rule
rule all:
        input: "VAMB_genes/nonredundant_gene_clusters/gene_count_matrix.tsv",
               "VAMB_genes/nonredundant_gene_clusters/geneID_clusterID_snake.tsv",
               "VAMB_genes/signature_genes/MGS_object.Rdata",
               "VAMB_genes/contigs/clusters.tsv"


# Extracting the contigs of only the clusters that are included in the analysis
rule extract_contigs_IDs:
    input: 
        clusters_to_include = config["cluster_analysis_file"],
        vamb_clusters = config["cluster_file"]
    output:
        clusters_with_contigs = "VAMB_genes/contigs/clusters.tsv"
    threads: 1
    resources:
        mem_gb = 180,
        runtime = 3600 # 1h
    run: 
        ID_set = set(IDS) # The IDs of the approved bins from VAMB are collected in a set

        # The approved binIDs are paired with their respective contig IDs and written to a file
        vamb = open(input.vamb_clusters, 'r')
        contigsfile = open(output.clusters_with_contigs, 'w')

        # Going through each bin from VAMB only keeping the ones belonging to the clusters we want to include in the analysis
        for line in vamb:
            cluster_bin = line.split()[0]
            cluster = int(cluster_bin.split("_")[-1])
            if cluster in ID_set:
                contigsfile.write(line)    
        vamb.close()
        contigsfile.close()


# Extracting the headers for the contigs belonging to each cluster
rule extract_contig_headers:
    input:
        "VAMB_genes/contigs/clusters.tsv"
    output:
        expand("VAMB_genes/contigs/headers_{id}.txt", id=IDS)
    threads: 20
    resources:
        mem_gb = 180,
        runtime = 86400 # 1d
    shell: 
        """
        cat {input} | while read line; do
        cols=($line)
        cluster=$(echo "${{cols[0]}}" | cut -d '_' -f 2)
	
        outfile=$(echo "VAMB_genes/contigs/headers_$cluster.txt")
        echo $line >> $outfile
        done;
        """

# For each cluster, the headers of the contigs are used to extract the sequences from the assemblies, creating fna files for each cluster
rule cluster_sequences:
    input:
        headers = "VAMB_genes/contigs/headers_{id}.txt"
    output:
        "VAMB_genes/contigs/cluster_{id}.fna"
    threads: 1
    resources:
        mem_gb = 40,
        runtime = 173000 # 2d
    params:
        assembly_dir = config["assemblydir"],
    shell:
        """
        cat {input.headers} | while read line; do
        cols=($line)
        cluster=$(echo "${{cols[0]}}" | cut -d '_' -f 2)
        sample=$(echo "${{cols[0]}}" |	cut -d '_' -f 1)
        contigfile=$(echo "${{cols[1]}}.tsv")
        contig_ID=$(echo "${{cols[1]}}")
        node=$(echo "$(cut -d '_' -f 2- <<< "${{cols[1]}}")")
        echo "$(cut -d '_' -f 2- <<< "${{cols[1]}}")" > $contigfile
		
        fasta=$(echo "{params.assembly_dir}/$sample.fna")
        seqtk subseq $fasta $contigfile >> {output} ###extracting the sequence of the contig
        sed -i "s/$node/$contig_ID/g" {output}
        rm $contigfile ###deleting intermediate files
        done; 
        """

# Use prodigal to predict genes
rule gene_predict:
    input:
        "VAMB_genes/contigs/cluster_{id}.fna"
    output:
        protein = "VAMB_genes/prodigal_genes/proteins/{id}.faa",
        nuceotides = "VAMB_genes/prodigal_genes/nucleotides/{id}.fna"
    threads: 1
    resources:
        mem_gb = 20,
        runtime = 86400 # 24h
    shell:
        "prodigal -i {input} -a {output.protein} -d {output.nuceotides} -p meta"


# combine genes from all the samples
rule combine_genes:
    input:
        prot = expand("VAMB_genes/prodigal_genes/proteins/{id}.faa", id=IDS),
        nuc = expand("VAMB_genes/prodigal_genes/nucleotides/{id}.fna", id=IDS)
    output:
        prot = "VAMB_genes/prodigal_genes/all_genes.faa",
        nuc = "VAMB_genes/prodigal_genes/all_genes.fna"
    threads: 1
    resources:
        mem_gb = 60,
        runtime = 10000
    shell:
        "cat {input.prot} > {output.prot}; cat {input.nuc} > {output.nuc};" #for file in {input}; do gzip -f $file; done


# Get representative genes from all genes.
rule repres_genes:
    input:
        "VAMB_genes/prodigal_genes/all_genes.faa"
    output:
        fasta = "VAMB_genes/all_genes95_rep_seq.fasta",
        tsv = "VAMB_genes/all_genes95_cluster.tsv"
    threads: 14
    resources:
        mem_gb = 50,
        runtime = 86400
    shell:
        "mmseqs easy-linclust --min-seq-id 0.95 -c 0.95 --threads {threads} {input} VAMB_genes/all_genes95 tmp;"


# Creating a file only containing the redundant genes and their representatives
# Based on the clustering file from mmseqs
rule redundant_genes:
    input:
        "VAMB_genes/all_genes95_cluster.tsv"
    output:
        "VAMB_genes/prodigal_genes/mmseqs_95id/redundant_genes.tsv"
    threads: 1
    resources:
        mem_gb = 50,
        runtime = 86400
    shell: 
        "awk '$1!=$2' {input} | cut -f2 | uniq > {output}"


# Creating a fasta file for each cluster only containing non-redundant genes (also excluding representatives)
rule nonredundant_clusters:
    input: 
        prot = "VAMB_genes/prodigal_genes/proteins/{id}.faa",
        nuc = "VAMB_genes/prodigal_genes/nucleotides/{id}.fna",
        redundant = "VAMB_genes/prodigal_genes/mmseqs_95id/redundant_genes.tsv"
    output:
        prot_nonredundant = "VAMB_genes/nonredundant_gene_clusters/proteins/{id}_nonredundant.faa",
        nuc_nonredundant = "VAMB_genes/nonredundant_gene_clusters/nucleotides/{id}_nonredundant.fna",
        gene_lists = "VAMB_genes/nonredundant_gene_clusters/gene_lists/{id}_genes.txt"
    threads: 1
    resources:
        mem_gb = 50,
        runtime = 86400
    shell:
        "filterbyname.sh in={input.prot} out={output.prot_nonredundant} names={input.redundant} include=f; "
        "filterbyname.sh in={input.nuc} out={output.nuc_nonredundant} names={input.redundant} include=f; "
        "grep '>' {output.prot_nonredundant} | cut -d' ' -f1 | sed --expression='s/>//g' > {output.gene_lists}"


rule nonredundant_catalogue:
    input:
        genecat = "VAMB_genes/prodigal_genes/all_genes.fna",
        redundant = "VAMB_genes/prodigal_genes/mmseqs_95id/redundant_genes.tsv"
    output:
        genecat_nonredundant = "VAMB_genes/nonredundant_gene_clusters/all_genes_nonredundant.fasta"
    threads: 1
    resources:
        mem_gb = 50,
        runtime = 86400
    shell:
        "filterbyname.sh in={input.genecat} out={output.genecat_nonredundant} names={input.redundant} include=f"


# The reads are mapped to the nonredundant gene catalogue with minimap2
rule minimap_index:
    input:
        "VAMB_genes/nonredundant_gene_clusters/all_genes_nonredundant.fasta"
    output:
        index = "VAMB_genes/nonredundant_gene_clusters/nonredundant.mmi",
        gene_lengths = "VAMB_genes/nonredundant_gene_clusters/all_genes_nonredundant.fasta.fai"
    threads: 1
    resources:
        mem_gb = 50,
        runtime = 86400
    shell:
        "minimap2 -d {output.index} {input}; touch {output.gene_lengths}"

rule minimap_align:
    input:
        index = "VAMB_genes/nonredundant_gene_clusters/nonredundant.mmi",
        gene_cat = "VAMB_genes/nonredundant_gene_clusters/all_genes_nonredundant.fasta",
        fastq1 = "/home/projects/cu_10108/people/trizac/reads/{sample}_1.fastq",
       	fastq2 = "/home/projects/cu_10108/people/trizac/reads/{sample}_2.fastq"
    output:
        temp("VAMB_genes/nonredundant_gene_clusters/mapped_reads/gene_counts_{sample}.bam")
    threads: 40
    resources:
        mem_gb = 188,
        runtime = 86400 #24h
    shell:
        "minimap2 -v 1 -t 40 -N 50 -ax sr {input.index} {input.fastq1} {input.fastq2} | samtools view -T {input.gene_cat} -F 3584 -b --threads {threads} | samtools sort --threads {threads} > {output}"


# Use samtools to count the genes
rule count_genes:
    input:
        "VAMB_genes/nonredundant_gene_clusters/mapped_reads/gene_counts_{sample}.bam"
    output:
        count = "VAMB_genes/nonredundant_gene_clusters/counts/{sample}.counts"
    threads: 1
    resources:
        mem_gb = 20,
        runtime = 1800 #30min
    shell:
        "samtools idxstats {input} | cut -f3 > {output.count}"

# Create the gene index
rule gene_names:
    input:
        "VAMB_genes/nonredundant_gene_clusters/mapped_reads/gene_counts_{sample}.bam"
    output:
        "VAMB_genes/nonredundant_gene_clusters/mapped_reads/gene_names_{sample}"
    wildcard_constraints:
        sample=SAMPLES[0]
    threads: 1
    resources:
        mem_gb = 20,
        runtime = 1800 #30min
    shell:
        "samtools idxstats {input} | cut -f1 > {output}"


# Create the header for the matrix
rule create_header:
    input: 
        expand("VAMB_genes/nonredundant_gene_clusters/counts/{sample}.counts", sample=SAMPLES)
    output:
        header = "VAMB_genes/nonredundant_gene_clusters/mapped_reads/header.txt"
    threads: 1
    resources:
        mem_gb = 188,
        runtime = 1800 #30min
    run:
        header = "Gene"
        for f in input:
            sample_name = f.split("/")[-1].split(".")[0]
            header = header + "\t" + sample_name
        header = header + "\n"
        with open(output.header, "w") as out:
            out.write(header)


#Combining the gene names with the counts of all samples
rule gene_count_matrix:
    input:
        counts = expand("VAMB_genes/nonredundant_gene_clusters/counts/{sample}.counts", sample=SAMPLES),
        gene_names = expand("VAMB_genes/nonredundant_gene_clusters/mapped_reads/gene_names_{sample}", sample=SAMPLES[0]),
        header = "VAMB_genes/nonredundant_gene_clusters/mapped_reads/header.txt"
    output:
        "VAMB_genes/nonredundant_gene_clusters/gene_count_matrix.tsv"
    threads: 1
    resources:
        mem_gb = 188,
        runtime = 1800 #30min
    shell:
        "paste {input.gene_names} {input.counts} | cat {input.header} - > {output}; sed -i '$d' {output}"


#Combining the genelists into a single file with the cluster number as a column
rule gene_lists:
    input: expand("VAMB_genes/nonredundant_gene_clusters/gene_lists/{id}_genes.txt", id=IDS)
    output: "VAMB_genes/nonredundant_gene_clusters/geneID_clusterID_snake.tsv"
    threads: 38
    resources:
        mem_gb = 188,
        runtime = 345600 # 4 days
    shell:
        "for file in {input}; do cat $file | while read line; do cluster=$(echo $file | grep -o '[^/]*$' | cut -d '_' -f 1); echo $line $cluster >> {output}; done; done;"


#Converting the gene count matrix to cluster-matrices in R dataformat 
rule format_conversion:
    input:
        gene_clusters = "VAMB_genes/nonredundant_gene_clusters/geneID_clusterID_snake.tsv",
        matrix = "VAMB_genes/nonredundant_gene_clusters/gene_count_matrix.tsv",
        gene_lengths = "VAMB_genes/nonredundant_gene_clusters/all_genes_nonredundant.fasta.fai"
    output:
        R_clusters = "VAMB_genes/signature_genes/cluster.RDS",
        R_gene_lengths = "VAMB_genes/signature_genes/gene_lengths.RDS"
    threads: 38
    resources:
        mem_gb = 188,
        runtime = 86400 # 24h
    script:
        "scripts/matrix2SG_formatconversion.R"


# Identifying the refined sets of signature genes using the gene count matrix and gene lengths
rule SG_refinement:
    input:
        R_clusters = "VAMB_genes/signature_genes/cluster.RDS",
        R_gene_lengths = "VAMB_genes/signature_genes/gene_lengths.RDS"
    output:
        screened_clusters = "VAMB_genes/signature_genes/clusters_screened.Rdata",
        MGS_object = "VAMB_genes/signature_genes/MGS_object.Rdata"
    threads: 6
    resources:
        mem_gb = 188,
        runtime = 432000 # 5days
    params:
        functions = "Functions_v4.R"
    script:
        "scripts/SG_refinement.R"

    
# Creating abundance profiles from the SG
rule abundance_profile:
    input:
        R_gene_lengths = "VAMB_genes/signature_genes/gene_lengths.RDS",
        R_clusters = "VAMB_genes/signature_genes/cluster.RDS",
        MGS_object = "VAMB_genes/signature_genes/MGS_object.Rdata",
        annotation = "GTDB-tk_annotated_clusters.csv"
    output:
        physeq_abundance = "VAMB_phyloseq.RData"
    threads: 6
    resources:
        mem_gb = 188,
        runtime = 43200 #12 h
    script:
        "scripts/abundance_profiles.R"
